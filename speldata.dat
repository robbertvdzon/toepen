{"alleSpelers":[{"id":"27331","naam":"Robbert","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"80785","naam":"Bol","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"35113","naam":"Bob","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"21682","naam":"Dimi","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"18158","naam":"Ferry","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"23912","naam":"JeroenA","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"58137","naam":"Goof","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"71976","naam":"JGwoud","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"50601","naam":"Berg","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"92718","naam":"Joost","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"87079","naam":"Schaap","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"85365","naam":"Marco","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"12505","naam":"Martin","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"97570","naam":"Mike","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"72780","naam":"Niels","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"14174","naam":"Peter","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"78867","naam":"Erik","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"175867","naam":"SpelerX","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"288567","naam":"SpelerY","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"488367","naam":"SpelerZ","wilMeedoen":true,"isMonkey":true,"score":0}],"tafels":[{"tafelNr":1,"log":["val speler92718 = maakSpeler(\"speler.naam\", \"1\")","val speler1 =  speler92718","var speler92718kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler92718kaarten.add(Kaart(KLAVER, 12))","speler92718kaarten.add(Kaart(KLAVER, 8))","speler92718kaarten.add(Kaart(SCHOPPEN, 8))","speler92718kaarten.add(Kaart(SCHOPPEN, 13))","SpelerService.nieuwSpel(speler1, 5)","SpelerService.nieuweRonde(speler1, speler92718kaarten)","val speler12505 = maakSpeler(\"speler.naam\", \"2\")","val speler2 =  speler12505","var speler12505kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler12505kaarten.add(Kaart(SCHOPPEN, 12))","speler12505kaarten.add(Kaart(RUITEN, 10))","speler12505kaarten.add(Kaart(KLAVER, 7))","speler12505kaarten.add(Kaart(HARTEN, 8))","SpelerService.nieuwSpel(speler2, 5)","SpelerService.nieuweRonde(speler2, speler12505kaarten)","val speler14174 = maakSpeler(\"speler.naam\", \"3\")","val speler3 =  speler14174","var speler14174kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler14174kaarten.add(Kaart(KLAVER, 10))","speler14174kaarten.add(Kaart(SCHOPPEN, 11))","speler14174kaarten.add(Kaart(RUITEN, 7))","speler14174kaarten.add(Kaart(KLAVER, 13))","SpelerService.nieuwSpel(speler3, 5)","SpelerService.nieuweRonde(speler3, speler14174kaarten)","val speler97570 = maakSpeler(\"speler.naam\", \"4\")","val speler4 =  speler97570","var speler97570kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler97570kaarten.add(Kaart(KLAVER, 11))","speler97570kaarten.add(Kaart(HARTEN, 14))","speler97570kaarten.add(Kaart(SCHOPPEN, 9))","speler97570kaarten.add(Kaart(HARTEN, 9))","SpelerService.nieuwSpel(speler4, 5)","SpelerService.nieuweRonde(speler4, speler97570kaarten)","val speler72780 = maakSpeler(\"speler.naam\", \"5\")","val speler5 =  speler72780","var speler72780kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler72780kaarten.add(Kaart(RUITEN, 8))","speler72780kaarten.add(Kaart(HARTEN, 10))","speler72780kaarten.add(Kaart(KLAVER, 14))","speler72780kaarten.add(Kaart(KLAVER, 9))","SpelerService.nieuwSpel(speler5, 5)","SpelerService.nieuweRonde(speler5, speler72780kaarten)","val speler50601 = maakSpeler(\"speler.naam\", \"6\")","val speler6 =  speler50601","var speler50601kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler50601kaarten.add(Kaart(RUITEN, 11))","speler50601kaarten.add(Kaart(SCHOPPEN, 7))","speler50601kaarten.add(Kaart(RUITEN, 14))","speler50601kaarten.add(Kaart(RUITEN, 9))","SpelerService.nieuwSpel(speler6, 5)","SpelerService.nieuweRonde(speler6, speler50601kaarten)","val speler488367 = maakSpeler(\"speler.naam\", \"7\")","val speler7 =  speler488367","var speler488367kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler488367kaarten.add(Kaart(RUITEN, 13))","speler488367kaarten.add(Kaart(SCHOPPEN, 10))","speler488367kaarten.add(Kaart(HARTEN, 11))","speler488367kaarten.add(Kaart(HARTEN, 12))","SpelerService.nieuwSpel(speler7, 5)","SpelerService.nieuweRonde(speler7, speler488367kaarten)","val tafel = Tafel(1)","tafel.spelers = listOf(speler1, speler2, speler3, speler4).toMutableList()","tafel.opkomer = speler1","tafel.huidigeSpeler = speler1","tafel.inzet = 1","SpelContext.spelData.tafels = listOf(tafel).toMutableList()","assertThat(SpelerService.speelKaart(speler92718, Kaart(KLAVER,8))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler12505, Kaart(KLAVER,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler14174, Kaart(KLAVER,13))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler97570, Kaart(KLAVER,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler72780, Kaart(KLAVER,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler50601, Kaart(RUITEN,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler488367, Kaart(HARTEN,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler72780)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler72780, Kaart(RUITEN,8))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler50601, Kaart(RUITEN,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.toep(speler488367)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pas(speler92718)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pas(speler12505)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.gaMeeMetToep(speler14174)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.gaMeeMetToep(speler97570)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.gaMeeMetToep(speler72780)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.gaMeeMetToep(speler50601)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler488367, Kaart(RUITEN,13))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler14174, Kaart(RUITEN,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler97570, Kaart(HARTEN,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler488367)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler488367, Kaart(SCHOPPEN,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler14174, Kaart(SCHOPPEN,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler97570, Kaart(SCHOPPEN,9))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler72780, Kaart(KLAVER,9))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler50601, Kaart(SCHOPPEN,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler14174)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler14174, Kaart(KLAVER,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler97570, Kaart(HARTEN,9))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler72780, Kaart(HARTEN,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))"],"spelers":[{"id":"92718","naam":"Joost","kaarten":[{"symbool":"KLAVER","waarde":12},{"symbool":"SCHOPPEN","waarde":8},{"symbool":"SCHOPPEN","waarde":13}],"gespeeldeKaart":null,"totaalLucifers":9,"ingezetteLucifers":0,"gepast":true,"toepKeuze":"PAS","actiefInSpel":true,"scoreDezeRonde":0},{"id":"12505","naam":"Martin","kaarten":[{"symbool":"SCHOPPEN","waarde":12},{"symbool":"RUITEN","waarde":10},{"symbool":"HARTEN","waarde":8}],"gespeeldeKaart":null,"totaalLucifers":9,"ingezetteLucifers":0,"gepast":true,"toepKeuze":"PAS","actiefInSpel":true,"scoreDezeRonde":0},{"id":"14174","naam":"Peter","kaarten":[],"gespeeldeKaart":{"symbool":"KLAVER","waarde":10},"totaalLucifers":10,"ingezetteLucifers":2,"gepast":false,"toepKeuze":"MEE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"97570","naam":"Mike","kaarten":[],"gespeeldeKaart":{"symbool":"HARTEN","waarde":9},"totaalLucifers":10,"ingezetteLucifers":2,"gepast":false,"toepKeuze":"MEE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"72780","naam":"Niels","kaarten":[],"gespeeldeKaart":{"symbool":"HARTEN","waarde":10},"totaalLucifers":10,"ingezetteLucifers":2,"gepast":false,"toepKeuze":"MEE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"50601","naam":"Berg","kaarten":[{"symbool":"RUITEN","waarde":9}],"gespeeldeKaart":null,"totaalLucifers":10,"ingezetteLucifers":2,"gepast":false,"toepKeuze":"MEE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"488367","naam":"SpelerZ","kaarten":[{"symbool":"HARTEN","waarde":12}],"gespeeldeKaart":null,"totaalLucifers":10,"ingezetteLucifers":2,"gepast":false,"toepKeuze":"TOEP","actiefInSpel":true,"scoreDezeRonde":0}],"spelersDieAfZijn":[],"opkomer":"14174","huidigeSpeler":"50601","toeper":null,"inzet":2,"slagWinnaar":null,"tafelWinnaar":null,"gepauzeerd":false},{"tafelNr":2,"log":["val speler58137 = maakSpeler(\"speler.naam\", \"1\")","val speler1 =  speler58137","var speler58137kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler58137kaarten.add(Kaart(KLAVER, 11))","speler58137kaarten.add(Kaart(HARTEN, 10))","speler58137kaarten.add(Kaart(HARTEN, 9))","speler58137kaarten.add(Kaart(KLAVER, 14))","SpelerService.nieuwSpel(speler1, 5)","SpelerService.nieuweRonde(speler1, speler58137kaarten)","val speler288567 = maakSpeler(\"speler.naam\", \"2\")","val speler2 =  speler288567","var speler288567kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler288567kaarten.add(Kaart(SCHOPPEN, 11))","speler288567kaarten.add(Kaart(HARTEN, 7))","speler288567kaarten.add(Kaart(RUITEN, 13))","speler288567kaarten.add(Kaart(SCHOPPEN, 8))","SpelerService.nieuwSpel(speler2, 5)","SpelerService.nieuweRonde(speler2, speler288567kaarten)","val speler78867 = maakSpeler(\"speler.naam\", \"3\")","val speler3 =  speler78867","var speler78867kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler78867kaarten.add(Kaart(HARTEN, 11))","speler78867kaarten.add(Kaart(HARTEN, 8))","speler78867kaarten.add(Kaart(HARTEN, 13))","speler78867kaarten.add(Kaart(RUITEN, 10))","SpelerService.nieuwSpel(speler3, 5)","SpelerService.nieuweRonde(speler3, speler78867kaarten)","val speler71976 = maakSpeler(\"speler.naam\", \"4\")","val speler4 =  speler71976","var speler71976kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler71976kaarten.add(Kaart(RUITEN, 12))","speler71976kaarten.add(Kaart(SCHOPPEN, 9))","speler71976kaarten.add(Kaart(RUITEN, 9))","speler71976kaarten.add(Kaart(RUITEN, 7))","SpelerService.nieuwSpel(speler4, 5)","SpelerService.nieuweRonde(speler4, speler71976kaarten)","val speler23912 = maakSpeler(\"speler.naam\", \"5\")","val speler5 =  speler23912","var speler23912kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler23912kaarten.add(Kaart(SCHOPPEN, 14))","speler23912kaarten.add(Kaart(KLAVER, 12))","speler23912kaarten.add(Kaart(SCHOPPEN, 13))","speler23912kaarten.add(Kaart(KLAVER, 9))","SpelerService.nieuwSpel(speler5, 5)","SpelerService.nieuweRonde(speler5, speler23912kaarten)","val speler21682 = maakSpeler(\"speler.naam\", \"6\")","val speler6 =  speler21682","var speler21682kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler21682kaarten.add(Kaart(KLAVER, 7))","speler21682kaarten.add(Kaart(RUITEN, 14))","speler21682kaarten.add(Kaart(SCHOPPEN, 12))","speler21682kaarten.add(Kaart(HARTEN, 12))","SpelerService.nieuwSpel(speler6, 5)","SpelerService.nieuweRonde(speler6, speler21682kaarten)","val speler18158 = maakSpeler(\"speler.naam\", \"7\")","val speler7 =  speler18158","var speler18158kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler18158kaarten.add(Kaart(SCHOPPEN, 10))","speler18158kaarten.add(Kaart(RUITEN, 8))","speler18158kaarten.add(Kaart(RUITEN, 11))","speler18158kaarten.add(Kaart(SCHOPPEN, 7))","SpelerService.nieuwSpel(speler7, 5)","SpelerService.nieuweRonde(speler7, speler18158kaarten)","val tafel = Tafel(1)","tafel.spelers = listOf(speler1, speler2, speler3, speler4).toMutableList()","tafel.opkomer = speler1","tafel.huidigeSpeler = speler1","tafel.inzet = 1","SpelContext.spelData.tafels = listOf(tafel).toMutableList()","assertThat(SpelerService.speelKaart(speler58137, Kaart(KLAVER,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler288567, Kaart(HARTEN,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler78867, Kaart(RUITEN,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler71976, Kaart(SCHOPPEN,9))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler23912, Kaart(KLAVER,12))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler21682, Kaart(KLAVER,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler18158, Kaart(RUITEN,8))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler23912)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler23912, Kaart(KLAVER,9))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler21682, Kaart(SCHOPPEN,12))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler18158, Kaart(SCHOPPEN,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler58137, Kaart(KLAVER,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler288567, Kaart(SCHOPPEN,8))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler78867, Kaart(HARTEN,13))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler71976, Kaart(RUITEN,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler58137)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler58137, Kaart(HARTEN,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler288567, Kaart(SCHOPPEN,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler78867, Kaart(HARTEN,8))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler71976, Kaart(RUITEN,12))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler23912, Kaart(SCHOPPEN,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler21682, Kaart(HARTEN,12))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler18158, Kaart(SCHOPPEN,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler21682)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler21682, Kaart(RUITEN,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler18158, Kaart(RUITEN,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler58137, Kaart(HARTEN,9))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler288567, Kaart(RUITEN,13))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler78867, Kaart(HARTEN,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler71976, Kaart(RUITEN,9))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))"],"spelers":[{"id":"58137","naam":"Goof","kaarten":[],"gespeeldeKaart":{"symbool":"HARTEN","waarde":9},"totaalLucifers":10,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"288567","naam":"SpelerY","kaarten":[],"gespeeldeKaart":{"symbool":"RUITEN","waarde":13},"totaalLucifers":10,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"78867","naam":"Erik","kaarten":[],"gespeeldeKaart":{"symbool":"HARTEN","waarde":11},"totaalLucifers":10,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"71976","naam":"JGwoud","kaarten":[],"gespeeldeKaart":{"symbool":"RUITEN","waarde":9},"totaalLucifers":10,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"23912","naam":"JeroenA","kaarten":[{"symbool":"SCHOPPEN","waarde":13}],"gespeeldeKaart":null,"totaalLucifers":10,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"21682","naam":"Dimi","kaarten":[],"gespeeldeKaart":{"symbool":"RUITEN","waarde":14},"totaalLucifers":10,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"18158","naam":"Ferry","kaarten":[],"gespeeldeKaart":{"symbool":"RUITEN","waarde":11},"totaalLucifers":10,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0}],"spelersDieAfZijn":[],"opkomer":"21682","huidigeSpeler":"23912","toeper":null,"inzet":1,"slagWinnaar":null,"tafelWinnaar":null,"gepauzeerd":false},{"tafelNr":3,"log":["val speler80785 = maakSpeler(\"speler.naam\", \"1\")","val speler1 =  speler80785","var speler80785kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler80785kaarten.add(Kaart(KLAVER, 10))","speler80785kaarten.add(Kaart(KLAVER, 13))","speler80785kaarten.add(Kaart(KLAVER, 14))","speler80785kaarten.add(Kaart(SCHOPPEN, 13))","SpelerService.nieuwSpel(speler1, 5)","SpelerService.nieuweRonde(speler1, speler80785kaarten)","val speler87079 = maakSpeler(\"speler.naam\", \"2\")","val speler2 =  speler87079","var speler87079kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler87079kaarten.add(Kaart(KLAVER, 7))","speler87079kaarten.add(Kaart(RUITEN, 14))","speler87079kaarten.add(Kaart(HARTEN, 7))","speler87079kaarten.add(Kaart(RUITEN, 10))","SpelerService.nieuwSpel(speler2, 5)","SpelerService.nieuweRonde(speler2, speler87079kaarten)","val speler175867 = maakSpeler(\"speler.naam\", \"3\")","val speler3 =  speler175867","var speler175867kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler175867kaarten.add(Kaart(SCHOPPEN, 11))","speler175867kaarten.add(Kaart(RUITEN, 12))","speler175867kaarten.add(Kaart(HARTEN, 10))","speler175867kaarten.add(Kaart(RUITEN, 9))","SpelerService.nieuwSpel(speler3, 5)","SpelerService.nieuweRonde(speler3, speler175867kaarten)","val speler35113 = maakSpeler(\"speler.naam\", \"4\")","val speler4 =  speler35113","var speler35113kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler35113kaarten.add(Kaart(SCHOPPEN, 14))","speler35113kaarten.add(Kaart(HARTEN, 12))","speler35113kaarten.add(Kaart(HARTEN, 11))","speler35113kaarten.add(Kaart(KLAVER, 12))","SpelerService.nieuwSpel(speler4, 5)","SpelerService.nieuweRonde(speler4, speler35113kaarten)","val speler85365 = maakSpeler(\"speler.naam\", \"5\")","val speler5 =  speler85365","var speler85365kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler85365kaarten.add(Kaart(RUITEN, 11))","speler85365kaarten.add(Kaart(HARTEN, 8))","speler85365kaarten.add(Kaart(KLAVER, 8))","speler85365kaarten.add(Kaart(SCHOPPEN, 9))","SpelerService.nieuwSpel(speler5, 5)","SpelerService.nieuweRonde(speler5, speler85365kaarten)","val speler27331 = maakSpeler(\"speler.naam\", \"6\")","val speler6 =  speler27331","var speler27331kaarten: MutableList<Kaart> = emptyList<Kaart>().toMutableList()","speler27331kaarten.add(Kaart(SCHOPPEN, 7))","speler27331kaarten.add(Kaart(HARTEN, 14))","speler27331kaarten.add(Kaart(HARTEN, 13))","speler27331kaarten.add(Kaart(RUITEN, 7))","SpelerService.nieuwSpel(speler6, 5)","SpelerService.nieuweRonde(speler6, speler27331kaarten)","val tafel = Tafel(1)","tafel.spelers = listOf(speler1, speler2, speler3, speler4).toMutableList()","tafel.opkomer = speler1","tafel.huidigeSpeler = speler1","tafel.inzet = 1","SpelContext.spelData.tafels = listOf(tafel).toMutableList()","assertThat(SpelerService.speelKaart(speler80785, Kaart(KLAVER,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler87079, Kaart(KLAVER,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler175867, Kaart(HARTEN,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler35113, Kaart(KLAVER,12))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler85365, Kaart(KLAVER,8))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler27331, Kaart(HARTEN,13))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler35113)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler35113, Kaart(SCHOPPEN,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler85365, Kaart(SCHOPPEN,9))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler27331, Kaart(SCHOPPEN,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.toep(speler80785)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.gaMeeMetToep(speler87079)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pas(speler175867)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.gaMeeMetToep(speler35113)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.gaMeeMetToep(speler85365)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pas(speler27331)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler80785, Kaart(SCHOPPEN,13))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler87079, Kaart(RUITEN,10))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler35113)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler35113, Kaart(HARTEN,12))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler85365, Kaart(HARTEN,8))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler80785, Kaart(KLAVER,13))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler87079, Kaart(HARTEN,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.pakSlag(speler35113)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler35113, Kaart(HARTEN,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler85365, Kaart(RUITEN,11))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler80785, Kaart(KLAVER,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler87079, Kaart(RUITEN,14))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","speler80785.clear()","speler80785.kaarten.add(Kaart(KLAVER, 11))","speler80785.kaarten.add(Kaart(HARTEN, 13))","speler80785.kaarten.add(Kaart(HARTEN, 10))","speler80785.kaarten.add(Kaart(RUITEN, 13))","speler87079.clear()","speler87079.kaarten.add(Kaart(HARTEN, 11))","speler87079.kaarten.add(Kaart(KLAVER, 12))","speler87079.kaarten.add(Kaart(RUITEN, 9))","speler87079.kaarten.add(Kaart(HARTEN, 12))","speler175867.clear()","speler175867.kaarten.add(Kaart(HARTEN, 8))","speler175867.kaarten.add(Kaart(KLAVER, 8))","speler175867.kaarten.add(Kaart(RUITEN, 14))","speler175867.kaarten.add(Kaart(SCHOPPEN, 12))","speler35113.clear()","speler35113.kaarten.add(Kaart(HARTEN, 14))","speler35113.kaarten.add(Kaart(SCHOPPEN, 13))","speler35113.kaarten.add(Kaart(HARTEN, 9))","speler35113.kaarten.add(Kaart(SCHOPPEN, 7))","speler85365.clear()","speler85365.kaarten.add(Kaart(KLAVER, 7))","speler85365.kaarten.add(Kaart(RUITEN, 12))","speler85365.kaarten.add(Kaart(SCHOPPEN, 9))","speler85365.kaarten.add(Kaart(SCHOPPEN, 11))","speler27331.clear()","speler27331.kaarten.add(Kaart(KLAVER, 9))","speler27331.kaarten.add(Kaart(RUITEN, 8))","speler27331.kaarten.add(Kaart(KLAVER, 13))","speler27331.kaarten.add(Kaart(HARTEN, 7))","assertThat(SpelerService.pakSlag(speler35113)).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))","assertThat(SpelerService.speelKaart(speler85365, Kaart(KLAVER,7))).isEqualTo(CommandResult(CommandStatus.SUCCEDED, \"\"))"],"spelers":[{"id":"80785","naam":"Bol","kaarten":[{"symbool":"KLAVER","waarde":11},{"symbool":"HARTEN","waarde":13},{"symbool":"HARTEN","waarde":10},{"symbool":"RUITEN","waarde":13}],"gespeeldeKaart":null,"totaalLucifers":8,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"87079","naam":"Schaap","kaarten":[{"symbool":"HARTEN","waarde":11},{"symbool":"KLAVER","waarde":12},{"symbool":"RUITEN","waarde":9},{"symbool":"HARTEN","waarde":12}],"gespeeldeKaart":null,"totaalLucifers":8,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"175867","naam":"SpelerX","kaarten":[{"symbool":"HARTEN","waarde":8},{"symbool":"KLAVER","waarde":8},{"symbool":"RUITEN","waarde":14},{"symbool":"SCHOPPEN","waarde":12}],"gespeeldeKaart":null,"totaalLucifers":9,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"35113","naam":"Bob","kaarten":[{"symbool":"HARTEN","waarde":14},{"symbool":"SCHOPPEN","waarde":13},{"symbool":"HARTEN","waarde":9},{"symbool":"SCHOPPEN","waarde":7}],"gespeeldeKaart":null,"totaalLucifers":10,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"85365","naam":"Marco","kaarten":[{"symbool":"RUITEN","waarde":12},{"symbool":"SCHOPPEN","waarde":9},{"symbool":"SCHOPPEN","waarde":11}],"gespeeldeKaart":{"symbool":"KLAVER","waarde":7},"totaalLucifers":8,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0},{"id":"27331","naam":"Robbert","kaarten":[{"symbool":"KLAVER","waarde":9},{"symbool":"RUITEN","waarde":8},{"symbool":"KLAVER","waarde":13},{"symbool":"HARTEN","waarde":7}],"gespeeldeKaart":null,"totaalLucifers":9,"ingezetteLucifers":1,"gepast":false,"toepKeuze":"GEEN_KEUZE","actiefInSpel":true,"scoreDezeRonde":0}],"spelersDieAfZijn":[],"opkomer":"85365","huidigeSpeler":"27331","toeper":null,"inzet":1,"slagWinnaar":null,"tafelWinnaar":null,"gepauzeerd":false}],"uitslagen":[{"timestamp":"Sat May 16 15:44:40 CEST 2020","tafel":1,"logregels":[{"naam":"Ferry","score":5},{"naam":"Marco","score":2},{"naam":"Martin","score":2},{"naam":"Joost","score":0},{"naam":"SpelerY","score":2},{"naam":"Bol","score":3},{"naam":"JGwoud","score":2}]},{"timestamp":"Sat May 16 15:44:56 CEST 2020","tafel":2,"logregels":[{"naam":"Mike","score":2},{"naam":"Dimi","score":5},{"naam":"JeroenA","score":0},{"naam":"Bob","score":1},{"naam":"Erik","score":1},{"naam":"Berg","score":3},{"naam":"Schaap","score":0}]}],"automatischNieuweTafels":true,"nieuweTafelAutoPause":false,"aantalAutomatischeNieuweTafels":3,"aantalFishesNieuweTafels":10,"monkeyDelayMsec":50,"scorelijst":[{"id":"488367","naam":"SpelerZ","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"288567","naam":"SpelerY","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"175867","naam":"SpelerX","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"78867","naam":"Erik","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"14174","naam":"Peter","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"72780","naam":"Niels","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"97570","naam":"Mike","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"12505","naam":"Martin","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"85365","naam":"Marco","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"87079","naam":"Schaap","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"92718","naam":"Joost","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"50601","naam":"Berg","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"71976","naam":"JGwoud","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"58137","naam":"Goof","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"23912","naam":"JeroenA","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"18158","naam":"Ferry","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"21682","naam":"Dimi","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"35113","naam":"Bob","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"80785","naam":"Bol","wilMeedoen":true,"isMonkey":true,"score":0},{"id":"27331","naam":"Robbert","wilMeedoen":true,"isMonkey":true,"score":0}]}